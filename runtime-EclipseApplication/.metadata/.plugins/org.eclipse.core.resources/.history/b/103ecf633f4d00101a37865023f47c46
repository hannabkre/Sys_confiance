-- @path petrinet=file:/home/n7student/new-eclipse-workspace/n7.petrinet/model/petrinet.ecore
-- @path simplepdl=file:/home/n7student/new-eclipse-workspace/n7.simplePDL/simplepdl.ecore

module simplePDLToPetrinet;
create OUT : petrinet from IN : simplepdl;

-- Transformation d'un Process en Petrinet
rule Process2Petrinet {
    from
        process : simplepdl!Process
    to
        petrinet : petrinet!Petrinet(
            name <- process.name,
            petrinetElements <- process.workDefinitions->collect(wd | thisModule.resolveTemp(wd, 'wdElements'))->flatten()
        )
}

-- Transformation d'un WorkDefinition en Places, Transitions et Arcs
rule WD {
    from
        wd : simplepdl!WorkDefinition
    to
        start_place : petrinet!Place(
            token <- 1,
            name <- wd.name + '_start'
        ),
        starting_transition : petrinet!Transition(
            name <- wd.name + '_starting'
        ),
        active_place : petrinet!Place(
            token <- 0,
            name <- wd.name + '_active'
        ),
        finishing_transition : petrinet!Transition(
            name <- wd.name + '_finishing'
        ),
        finished_place : petrinet!Place(
            token <- 0,
            name <- wd.name + '_finished'
        ),
        started_place : petrinet!Place(
            token <- 0,
            name <- wd.name + '_started'
        ),
        arc1 : petrinet!Arc(
            fromNode <- start_place,
            toNode <- starting_transition,
            weight <- 1,
            arcType <- #normal,
            direction <- #P2T,
            name <- ''
        ),
        arc2 : petrinet!Arc(
            fromNode <- starting_transition,
            toNode <- active_place,
            weight <- 1,
            arcType <- #normal,
            direction <- #T2P,
            name <- ''
        ),
        arc3 : petrinet!Arc(
            fromNode <- active_place,
            toNode <- finishing_transition,
            weight <- 1,
            arcType <- #normal,
            direction <- #P2T,
            name <- ''
        ),
        arc4 : petrinet!Arc(
            fromNode <- finishing_transition,
            toNode <- finished_place,
            weight <- 1,
            arcType <- #normal,
            direction <- #T2P,
            name <- ''
        ),
        arc5 : petrinet!Arc(
            fromNode <- started_place,
            toNode <- starting_transition,
            weight <- 1,
            arcType <- #normal,
            direction <- #P2T,
            name <- ''
        )
}

-- Helper pour collecter tous les éléments créés par WD (pour Process)
helper context simplepdl!WorkDefinition def: wdElements : Sequence(petrinet!PetrinetElement) =
    Sequence{thisModule.resolveTemp(self, 'WD')};

-- Transformation des WorkSequences en arcs read
rule WS {
    from
        ws : simplepdl!WorkSequence
    to
        readArc : petrinet!Arc(
            fromNode <- thisModule.resolveTemp(ws.predecessor, 'started_place'), -- à adapter selon la logique
            toNode <- thisModule.resolveTemp(ws.successor, 'starting_transition'),
            weight <- 1,
            arcType <- #read,
            direction <- #P2T,
            name <- ''
        )
}

-- Transformation des Ressources en Places
rule R {
    from
        res : simplepdl!Ressource
    to
        place : petrinet!Place(
            token <- res.totalQuantity,
            name <- res.name
        )
}

-- Transformation des NeededRessource en Arcs
rule NR {
    from
        nr : simplepdl!NeededRessource
    to
        arc_start : petrinet!Arc(
            fromNode <- thisModule.resolveTemp(nr.ressource, 'place'),
            toNode <- thisModule.resolveTemp(nr.refImmediateComposite(), 'starting_transition'),
            weight <- nr.quantity,
            arcType <- #normal,
            direction <- #P2T,
            name <- ''
        ),
        arc_finish : petrinet!Arc(
            fromNode <- thisModule.resolveTemp(nr.ressource, 'place'),
            toNode <- thisModule.resolveTemp(nr.refImmediateComposite(), 'finishing_transition'),
            weight <- nr.quantity,
            arcType <- #normal,
            direction <- #T2P,
            name <- ''
        )
}
